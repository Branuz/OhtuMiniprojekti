plugins {
    id 'java'
    id 'application'
    id 'checkstyle'
    id 'jacoco'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

application {
    mainClass = 'project.main.Main'
}

compileJava.options.encoding = "UTF-8"
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


project.ext {
    junitVersion = '4.13'
    cucumberVersion = '6.8.1'
    seleniumVersion = '3.14.0'
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    implementation 'com.sparkjava:spark-core:2.9.3'
    implementation 'com.sparkjava:spark-template-thymeleaf:2.7.1'
    testImplementation 'junit:junit:' + junitVersion
    testImplementation 'io.cucumber:cucumber-java:' + cucumberVersion
    testImplementation 'io.cucumber:cucumber-junit:' + cucumberVersion
    implementation 'org.xerial:sqlite-jdbc:3.30.1'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version:seleniumVersion
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-api', version:seleniumVersion
    implementation group: 'org.seleniumhq.selenium', name: 'htmlunit-driver', version: '2.33.0'
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-chrome-driver', version:seleniumVersion
    implementation 'org.slf4j:slf4j-simple:1.6.1'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com/jpasikainen/tira/gui/**', 'com/jpasikainen/tira/Game.class'])
        }))
    }
}
checkstyle {
    ignoreFailures = true
    checkstyleMain.source = "src"
    // checkstyleMain.exclude('some/path/*.java')
}

jar {
    manifest {
        attributes(
                'Main-Class': 'project.main.Main'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean
